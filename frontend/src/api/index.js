import axios from 'axios';
import {
  getAccessToken,
  setAccessToken,
  getRefreshToken,
  setRefreshToken,
  clearTokens,
} from '../services/tokenService';

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å axios —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
const api = axios.create({
  baseURL: '/', 
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ ‚Äì –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω)
api.interceptors.request.use(
  config => {
    const token = getAccessToken();
    console.log('üîë Request interceptor - Access token:', token ? 'present' : 'missing');
    if (token) {
      config.headers['Authorization'] = `Bearer ${token}`;
    }
    return config;
  },
  error => Promise.reject(error)
);

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 401 –∏ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
api.interceptors.response.use(
  response => response,
  async error => {
    const originalRequest = error.config;
    console.log('üîë Response interceptor - Status:', error.response?.status);
    console.log('üîë Response interceptor - URL:', originalRequest.url);

    // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 401, –µ—â—ë –Ω–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å, –∏ —ç—Ç–æ –Ω–µ —Å–∞–º /refresh
    if (
      error.response?.status === 401 &&
      !originalRequest._retry &&
      !originalRequest.url.includes('/refresh')
    ) {
      console.log('üîë Attempting token refresh...');
      originalRequest._retry = true;

      const refreshToken = getRefreshToken();
      console.log('üîë Refresh token:', refreshToken ? 'present' : 'missing');
      
      if (refreshToken) {
        try {
          // –î–µ–ª–∞–µ–º refresh
          const { data } = await api.post('/refresh', { refreshToken });
          const { accessToken: newAccessToken, refreshToken: newRefreshToken } = data;
          console.log('üîë New tokens received');

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
          setAccessToken(newAccessToken);
          setRefreshToken(newRefreshToken);

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞
          window.dispatchEvent(new CustomEvent('tokenRefreshed', {
            detail: {
              accessToken: newAccessToken,
              refreshToken: newRefreshToken
            }
          }));

          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º accessToken
          originalRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;
          return api(originalRequest);
        } catch (refreshError) {
          console.error('üîë Token refresh failed:', refreshError);
          // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî —á–∏—Å—Ç–∏–º –∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
          clearTokens();
          return Promise.reject(refreshError);
        }
      } else {
        console.log('üîë No refresh token available');
        // –ù–µ—Ç refreshToken ‚Äî —Å—Ä–∞–∑—É –æ—á–∏—â–∞–µ–º –∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º
        clearTokens();
      }
    }

    return Promise.reject(error);
  }
);

export default api;
