// // package sockets

// // import (
// // 	"encoding/json"
// // 	"net/http"
// // 	"strconv"
// // 	"sync"
// // 	"time"

// // 	"m/backend/models"
// // 	"m/backend/services"

// // 	"github.com/google/uuid"
// // 	"github.com/gorilla/websocket"
// // 	"github.com/sirupsen/logrus"
// // )

// // // presenceSvc —Ö—Ä–∞–Ω–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ PresenceService, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–∑ main.go
// // var presenceSvc *services.PresenceService

// // // BroadcastMessage –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —á–∞—Ç–∞–º.
// // type BroadcastMessage struct {
// // 	ChatID uint   `json:"chatId"`
// // 	Data   []byte `json:"data"`
// // }

// // // Client –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ WebSocket‚Äë–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.
// // type Client struct {
// // 	Conn   *websocket.Conn // WebSocket‚Äë—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
// // 	UserID string          // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞)
// // 	Send   chan []byte     // –ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç—É
// // 	Chats  map[uint]bool   // –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ (chatID -> true)
// // 	// –ù–æ–≤–æ–µ –ø–æ–ª–µ: –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
// // 	TypingChats map[uint]bool
// // 	Mutex       sync.Mutex // –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—é Chats
// // }

// // // Hub —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ —Ä–∞—Å—Å—ã–ª–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∞—Ç–∞–º.
// // type Hub struct {
// // 	Clients           map[*Client]bool          // –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
// // 	ChatSubscriptions map[uint]map[*Client]bool // –î–ª—è –∫–∞–∂–¥–æ–≥–æ chatID –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–µ–≥–æ
// // 	Broadcast         chan BroadcastMessage     // –ö–∞–Ω–∞–ª –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç—ã
// // 	Register          chan *Client              // –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
// // 	Unregister        chan *Client              // –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è
// // 	Mutex             sync.RWMutex              // –ó–∞—â–∏—Ç–∞ –æ–±—â–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
// // }

// // // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π hub.
// // var hub = Hub{
// // 	Clients:           make(map[*Client]bool),
// // 	ChatSubscriptions: make(map[uint]map[*Client]bool),
// // 	Broadcast:         make(chan BroadcastMessage),
// // 	Register:          make(chan *Client),
// // 	Unregister:        make(chan *Client),
// // }

// // // IsUserTypingInChat –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞–±–∏—Ä–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∑–∞–¥–∞–Ω–Ω—ã–º userID —Ç–µ–∫—Å—Ç –≤ —á–∞—Ç–µ chatID.
// // func IsUserTypingInChat(chatID uint, userID string) bool {
// // 	hub.Mutex.RLock()
// // 	defer hub.Mutex.RUnlock()
// // 	subs, ok := hub.ChatSubscriptions[chatID]
// // 	if !ok {
// // 		return false
// // 	}
// // 	for client := range subs {
// // 		if client.UserID == userID {
// // 			client.Mutex.Lock()
// // 			typing, exists := client.TypingChats[chatID]
// // 			client.Mutex.Unlock()
// // 			if exists && typing {
// // 				return true
// // 			}
// // 		}
// // 	}
// // 	return false
// // }

// // // RunHub –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
// // func RunHub() {
// // 	for {
// // 		select {
// // 		case client := <-hub.Register:
// // 			hub.Mutex.Lock()
// // 			hub.Clients[client] = true
// // 			hub.Mutex.Unlock()
// // 			logrus.Infof("Client registered: %s", client.UserID)
// // 		case client := <-hub.Unregister:
// // 			hub.Mutex.Lock()
// // 			if _, ok := hub.Clients[client]; ok {
// // 				delete(hub.Clients, client)
// // 				// –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
// // 				for chatID := range client.Chats {
// // 					if subs, exists := hub.ChatSubscriptions[chatID]; exists {
// // 						delete(subs, client)
// // 						if len(subs) == 0 {
// // 							delete(hub.ChatSubscriptions, chatID)
// // 						}
// // 					}
// // 				}
// // 				close(client.Send)
// // 				logrus.Infof("Client unregistered: %s", client.UserID)
// // 			}
// // 			hub.Mutex.Unlock()
// // 		case msg := <-hub.Broadcast:
// // 			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–∞–º, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –¥–∞–Ω–Ω—ã–π —á–∞—Ç.
// // 			hub.Mutex.RLock()
// // 			if subs, ok := hub.ChatSubscriptions[msg.ChatID]; ok {
// // 				for client := range subs {
// // 					select {
// // 					case client.Send <- msg.Data:
// // 						logrus.Debugf("Message sent to client %s in chat %d", client.UserID, msg.ChatID)
// // 					default:
// // 						logrus.Warnf("Send channel full for client %s. Closing connection.", client.UserID)
// // 						close(client.Send)
// // 						delete(hub.Clients, client)
// // 					}
// // 				}
// // 			} else {
// // 				logrus.Debugf("No subscribers for chat %d", msg.ChatID)
// // 			}
// // 			hub.Mutex.RUnlock()
// // 		}
// // 	}
// // }

// // const (
// // 	writeWait  = 10 * time.Second
// // 	pongWait   = 60 * time.Second
// // 	pingPeriod = (pongWait * 9) / 10
// // )

// // var upgrader = websocket.Upgrader{
// // 	ReadBufferSize:  1024,
// // 	WriteBufferSize: 1024,
// // 	// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ CheckOrigin –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
// // 	CheckOrigin: func(r *http.Request) bool {
// // 		return true
// // 	},
// // }

// // // HandleWebSocket –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–ø–≥—Ä–µ–π–¥ HTTP-–∑–∞–ø—Ä–æ—Å–∞ –¥–æ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
// // // –ó–¥–µ—Å—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–æ—Å—Ç–æ—Ç—ã userID –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∏–∑ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞ "userID".
// // // func HandleWebSocket(w http.ResponseWriter, r *http.Request) {
// // // 	conn, err := upgrader.Upgrade(w, r, nil)
// // // 	if err != nil {
// // // 		logrus.Errorf("WebSocket upgrade error: %v", err)
// // // 		return
// // // 	}

// // // 	userID := r.URL.Query().Get("userID")
// // // 	if userID == "" {
// // // 		userID = uuid.New().String()
// // // 		logrus.Debug("HandleWebSocket: userID –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π UUID")
// // // 	}

// // // 	client := &Client{
// // // 		Conn:        conn,
// // // 		Send:        make(chan []byte, 256),
// // // 		UserID:      userID,
// // // 		Chats:       make(map[uint]bool),
// // // 		TypingChats: make(map[uint]bool),
// // // 	}

// // // 	hub.Register <- client
// // // 	logrus.Infof("HandleWebSocket: client %s –ø–æ–¥–∫–ª—é—á–µ–Ω", client.UserID)

// // // 	go client.writePump()
// // // 	client.readPump()
// // // }

// // func HandleWebSocket(w http.ResponseWriter, r *http.Request) {
// // 	conn, err := upgrader.Upgrade(w, r, nil)
// // 	if err != nil {
// // 		logrus.Errorf("WebSocket upgrade error: %v", err)
// // 		return
// // 	}

// // 	userID := r.URL.Query().Get("userID")
// // 	if userID == "" {
// // 		userID = uuid.New().String()
// // 		logrus.Debug("HandleWebSocket: userID –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π UUID")
// // 	}

// // 	client := &Client{
// // 		Conn:        conn,
// // 		Send:        make(chan []byte, 256),
// // 		UserID:      userID,
// // 		Chats:       make(map[uint]bool),
// // 		TypingChats: make(map[uint]bool),
// // 	}

// // 	// ‚úÖ Mark user as online
// // 	if presenceSvc != nil {
// // 		if err := presenceSvc.Touch(userID); err != nil {
// // 			logrus.Warnf("Failed to update presence for %s: %v", userID, err)
// // 		}
// // 	}

// // 	hub.Register <- client
// // 	logrus.Infof("HandleWebSocket: client %s –ø–æ–¥–∫–ª—é—á–µ–Ω", client.UserID)

// // 	go client.writePump()

// // 	// ‚úÖ Start listening and updating presence on each read
// // 	client.readPump()

// // 	// ‚ö†Ô∏è When client exits, no need to delete key ‚Äî TTL will expire it
// // }

// // // readPump —á–∏—Ç–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞.
// // // –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å JSON-—Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏.
// // func (c *Client) readPump() {
// // 	defer func() {
// // 		hub.Unregister <- c
// // 		c.Conn.Close()
// // 		logrus.Infof("readPump: –∑–∞–∫—Ä—ã—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ %s", c.UserID)

// // 		// üßπ –£–¥–∞–ª—è–µ–º presence-–∫–ª—é—á –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
// // 		if presenceSvc != nil {
// // 			if err := presenceSvc.Rdb.Del(presenceSvc.Ctx, services.PresencePrefix+c.UserID).Err(); err != nil {
// // 				logrus.Warnf("readPump: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å presence –∫–ª—é—á –∫–ª–∏–µ–Ω—Ç–∞ %s: %v", c.UserID, err)
// // 			}
// // 		}
// // 	}()

// // 	c.Conn.SetReadLimit(512)
// // 	c.Conn.SetReadDeadline(time.Now().Add(pongWait))
// // 	c.Conn.SetPongHandler(func(appData string) error {
// // 		c.Conn.SetReadDeadline(time.Now().Add(pongWait))
// // 		return nil
// // 	})

// // 	for {
// // 		_, msg, err := c.Conn.ReadMessage()
// // 		if err != nil {
// // 			if websocket.IsUnexpectedCloseError(err, websocket.CloseGoingAway, websocket.CloseAbnormalClosure) {
// // 				logrus.Errorf("readPump: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ WebSocket –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ %s: %v", c.UserID, err)
// // 			} else {
// // 				logrus.Debugf("readPump: –∫–ª–∏–µ–Ω—Ç %s –æ—Ç–∫–ª—é—á–∏–ª—Å—è: %v", c.UserID, err)
// // 			}
// // 			break
// // 		}

// // 		// var req struct {
// // 		// 	Action   string `json:"action"`
// // 		// 	ChatID   string `json:"chatId"`   // –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
// // 		// 	IsOnline *bool  `json:"isOnline"` // –¥–ª—è heartbeat-—Å–æ–æ–±—â–µ–Ω–∏—è
// // 		// }
// // 		// if err := json.Unmarshal(msg, &req); err != nil {
// // 		// 	logrus.Errorf("readPump: –æ—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ %s: %v", c.UserID, err)
// // 		// 	continue
// // 		// }

// // 		// chatID, err := strconv.ParseUint(req.ChatID, 10, 64)
// // 		// if err != nil {
// // 		// 	logrus.Warnf("readPump: –Ω–µ–≤–µ—Ä–Ω—ã–π chat_id '%s' –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ %s", req.ChatID, c.UserID)
// // 		// 	continue
// // 		// }

// // 		// c.Mutex.Lock()
// // 		// switch req.Action {
// // 		// case "subscribe":
// // 		// 	c.Chats[uint(chatID)] = true
// // 		// 	hub.Mutex.Lock()
// // 		// 	if hub.ChatSubscriptions[uint(chatID)] == nil {
// // 		// 		hub.ChatSubscriptions[uint(chatID)] = make(map[*Client]bool)
// // 		// 	}
// // 		// 	hub.ChatSubscriptions[uint(chatID)][c] = true
// // 		// 	hub.Mutex.Unlock()
// // 		// 	logrus.Infof("readPump: –∫–ª–∏–µ–Ω—Ç %s –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —á–∞—Ç %d", c.UserID, chatID)
// // 		// case "unsubscribe":
// // 		// 	delete(c.Chats, uint(chatID))
// // 		// 	hub.Mutex.Lock()
// // 		// 	if subs, exists := hub.ChatSubscriptions[uint(chatID)]; exists {
// // 		// 		delete(subs, c)
// // 		// 		if len(subs) == 0 {
// // 		// 			delete(hub.ChatSubscriptions, uint(chatID))
// // 		// 		}
// // 		// 	}
// // 		// 	hub.Mutex.Unlock()
// // 		// 	logrus.Infof("readPump: –∫–ª–∏–µ–Ω—Ç %s –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —á–∞—Ç–∞ %d", c.UserID, chatID)
// // 		// case "heartbeat":
// // 		// 	// –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª heartbeat, —Ç–æ –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ –ø–æ–ª–µ is_online –ø–µ—Ä–µ–¥–∞–Ω–æ
// // 		// 	if req.IsOnline != nil {
// // 		// 		logrus.Debugf("readPump: –ø–æ–ª—É—á–µ–Ω heartbeat –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ %s, is_online: %v", c.UserID, *req.IsOnline)
// // 		// 		// –û–±–Ω–æ–≤–ª—è–µ–º –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
// // 		// 		go updateUserOnlineStatus(c.UserID, *req.IsOnline)
// // 		// 	} else {
// // 		// 		logrus.Warnf("readPump: heartbeat –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ %s –±–µ–∑ –ø–æ–ª—è is_online", c.UserID)
// // 		// 	}
// // 		// default:
// // 		// 	logrus.Warnf("readPump: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ '%s' –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ %s", req.Action, c.UserID)
// // 		// }

// // 		var req struct {
// // 			Action   string `json:"action"`
// // 			ChatID   string `json:"chat_id"`   // –≤–º–µ—Å—Ç–æ "chatId"
// // 			IsOnline *bool  `json:"is_online"` // –≤–º–µ—Å—Ç–æ "isOnline"
// // 			IsTyping *bool  `json:"is_typing"` // –≤–º–µ—Å—Ç–æ "isTyping"
// // 		}

// // 		// var req struct {
// // 		// 	Action   string `json:"action"`
// // 		// 	ChatID   string `json:"chatId"`   // —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è subscribe/unsubscribe
// // 		// 	IsOnline *bool  `json:"isOnline"` // –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è heartbeat
// // 		// 	IsTyping *bool  `json:"isTyping"` // –Ω–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
// // 		// }
// // 		if err := json.Unmarshal(msg, &req); err != nil {
// // 			logrus.Errorf("readPump: –æ—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ %s: %v", c.UserID, err)
// // 			continue
// // 		}

// // 		switch req.Action {
// // 		case "subscribe", "unsubscribe":
// // 			chatID, err := strconv.ParseUint(req.ChatID, 10, 64)
// // 			if err != nil {
// // 				logrus.Warnf("readPump: –Ω–µ–≤–µ—Ä–Ω—ã–π chat_id '%s' –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ %s", req.ChatID, c.UserID)
// // 				continue
// // 			}
// // 			c.Mutex.Lock()
// // 			if req.Action == "subscribe" {
// // 				// –ª–æ–≥–∏–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
// // 				c.Chats[uint(chatID)] = true
// // 				hub.Mutex.Lock()
// // 				if hub.ChatSubscriptions[uint(chatID)] == nil {
// // 					hub.ChatSubscriptions[uint(chatID)] = make(map[*Client]bool)
// // 				}
// // 				hub.ChatSubscriptions[uint(chatID)][c] = true
// // 				hub.Mutex.Unlock()
// // 				logrus.Infof("readPump: –∫–ª–∏–µ–Ω—Ç %s –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —á–∞—Ç %d", c.UserID, chatID)
// // 			} else {
// // 				// –ª–æ–≥–∏–∫–∞ –æ—Ç–ø–∏—Å–∫–∏
// // 				delete(c.Chats, uint(chatID))
// // 				hub.Mutex.Lock()
// // 				if subs, exists := hub.ChatSubscriptions[uint(chatID)]; exists {
// // 					delete(subs, c)
// // 					if len(subs) == 0 {
// // 						delete(hub.ChatSubscriptions, uint(chatID))
// // 					}
// // 				}
// // 				hub.Mutex.Unlock()
// // 				logrus.Infof("readPump: –∫–ª–∏–µ–Ω—Ç %s –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —á–∞—Ç–∞ %d", c.UserID, chatID)
// // 			}
// // 			c.Mutex.Unlock()
// // 		case "heartbeat":
// // 			// if req.IsOnline != nil {
// // 			// 	logrus.Debugf("readPump: –ø–æ–ª—É—á–µ–Ω heartbeat –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ %s, is_online: %v", c.UserID, *req.IsOnline)
// // 			// 	go updateUserOnlineStatus(c.UserID, *req.IsOnline)
// // 			// } else {
// // 			// 	logrus.Warnf("readPump: heartbeat –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ %s –±–µ–∑ –ø–æ–ª—è is_online", c.UserID)
// // 			// }

// // 			logrus.Debugf("readPump: –ø–æ–ª—É—á–µ–Ω heartbeat –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ %s", c.UserID)
// // 			// –û–±–Ω–æ–≤–ª—è–µ–º TTL –≤ Redis: —Å—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–Ω–ª–∞–π–Ω
// // 			if presenceSvc != nil {
// // 				if err := presenceSvc.Touch(c.UserID); err != nil {
// // 					logrus.Warnf("presence.Touch failed for %s: %v", c.UserID, err)
// // 				}
// // 			} else {
// // 				logrus.Warn("presenceSvc –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, heartbeat –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
// // 			}

// // 		case "typing":
// // 			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
// // 			chatID, err := strconv.ParseUint(req.ChatID, 10, 64)
// // 			if err != nil {
// // 				logrus.Warnf("readPump: –Ω–µ–≤–µ—Ä–Ω—ã–π chat_id '%s' –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ typing –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ %s", req.ChatID, c.UserID)
// // 				continue
// // 			}
// // 			if req.IsTyping == nil {
// // 				logrus.Warnf("readPump: –ø–æ–ª–µ is_typing –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ typing –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ %s", c.UserID)
// // 				continue
// // 			}
// // 			c.Mutex.Lock()
// // 			// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
// // 			c.TypingChats[uint(chatID)] = *req.IsTyping
// // 			c.Mutex.Unlock()
// // 			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞
// // 			uid, err := uuid.Parse(c.UserID)
// // 			if err != nil {
// // 				logrus.Errorf("readPump: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å userID –∫–ª–∏–µ–Ω—Ç–∞ %s: %v", c.UserID, err)
// // 				continue
// // 			}
// // 			go BroadcastTypingNotification(uid, uint(chatID), *req.IsTyping)

// // 		default:
// // 			logrus.Warnf("readPump: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ '%s' –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ %s", req.Action, c.UserID)
// // 		}

// // 		//c.Mutex.Unlock()
// // 	}
// // }

// // // writePump –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∏–Ω–≥–∏.
// // func (c *Client) writePump() {
// // 	ticker := time.NewTicker(pingPeriod)
// // 	defer func() {
// // 		ticker.Stop()
// // 		c.Conn.Close()
// // 		logrus.Infof("writePump: –∑–∞–∫—Ä—ã—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ %s", c.UserID)
// // 	}()

// // 	for {
// // 		select {
// // 		case message, ok := <-c.Send:
// // 			c.Conn.SetWriteDeadline(time.Now().Add(writeWait))
// // 			if !ok {
// // 				c.Conn.WriteMessage(websocket.CloseMessage, []byte{})
// // 				return
// // 			}
// // 			w, err := c.Conn.NextWriter(websocket.TextMessage)
// // 			if err != nil {
// // 				logrus.Errorf("writePump: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å–∞—Ç–µ–ª—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ %s: %v", c.UserID, err)
// // 				return
// // 			}
// // 			w.Write(message)

// // 			n := len(c.Send)
// // 			for i := 0; i < n; i++ {
// // 				w.Write([]byte("\n"))
// // 				w.Write(<-c.Send)
// // 			}

// // 			if err := w.Close(); err != nil {
// // 				logrus.Errorf("writePump: –æ—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∏—Å–∞—Ç–µ–ª—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ %s: %v", c.UserID, err)
// // 				return
// // 			}
// // 		case <-ticker.C:
// // 			c.Conn.SetWriteDeadline(time.Now().Add(writeWait))
// // 			if err := c.Conn.WriteMessage(websocket.PingMessage, nil); err != nil {
// // 				logrus.Errorf("writePump: –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ping –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ %s: %v", c.UserID, err)
// // 				return
// // 			}
// // 		}
// // 	}
// // }

// // // BroadcastNewMessage —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, models.Message) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ hub.
// // func BroadcastNewMessage(msg models.Message) error {
// // 	//data, err := json.Marshal(msg)
// // 	// ‚ñ∂ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –µ–¥–∏–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª —Å –ø–æ–ª–µ–º type
// // 	payload := map[string]interface{}{
// // 		"type":      "message",
// // 		"chat_id":   msg.ChatID,
// // 		"id":        msg.ID,
// // 		"sender_id": msg.SenderID.String(),
// // 		"content":   msg.Content,
// // 		//"timestamp": msg.Timestamp.Unix(),
// // 		"timestamp": msg.Timestamp.UnixNano() / int64(time.Millisecond),
// // 		"read":      msg.Read,
// // 	}
// // 	data, err := json.Marshal(payload)
// // 	if err != nil {
// // 		logrus.Errorf("BroadcastNewMessage: –æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
// // 		return err
// // 	}
// // 	hub.Broadcast <- BroadcastMessage{
// // 		ChatID: msg.ChatID,
// // 		Data:   data,
// // 	}
// // 	logrus.Infof("BroadcastNewMessage: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç %d", msg.ChatID)
// // 	return nil
// // }

// // // BroadcastNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –æ–Ω –æ–Ω–ª–∞–π–Ω) –ø–æ –µ–≥–æ userID.
// // func BroadcastNotification(userID uuid.UUID, message string) {
// // 	data, err := json.Marshal(map[string]string{
// // 		"type":    "notification",
// // 		"message": message,
// // 	})
// // 	if err != nil {
// // 		logrus.Errorf("BroadcastNotification: –æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %v", err)
// // 		return
// // 	}

// // 	hub.Mutex.RLock()
// // 	defer hub.Mutex.RUnlock()
// // 	for client := range hub.Clients {
// // 		if client.UserID == userID.String() {
// // 			select {
// // 			case client.Send <- data:
// // 				logrus.Infof("BroadcastNotification: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s", userID)
// // 			default:
// // 				logrus.Warnf("BroadcastNotification: –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω", userID)
// // 			}
// // 		}
// // 	}
// // }

// // // BroadcastTypingNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ —Ç–µ–∫—Å—Ç–∞ –≤ —á–∞—Ç.
// // func BroadcastTypingNotification(userID uuid.UUID, chatID uint, isTyping bool) {
// // 	data, err := json.Marshal(map[string]interface{}{
// // 		"type":      "typing",
// // 		"user_id":   userID.String(),
// // 		"chat_id":   chatID,
// // 		"is_typing": isTyping,
// // 		"timestamp": time.Now().Unix(),
// // 	})
// // 	if err != nil {
// // 		logrus.Errorf("BroadcastTypingNotification: –æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %v", err)
// // 		return
// // 	}

// // 	hub.Mutex.RLock()
// // 	subscribers, ok := hub.ChatSubscriptions[chatID]
// // 	hub.Mutex.RUnlock()
// // 	if !ok {
// // 		logrus.Debugf("BroadcastTypingNotification: –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —á–∞—Ç–∞ %d –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", chatID)
// // 		return
// // 	}

// // 	for client := range subscribers {
// // 		select {
// // 		case client.Send <- data:
// // 			logrus.Infof("BroadcastTypingNotification: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s –≤ —á–∞—Ç–µ %d", client.UserID, chatID)
// // 		default:
// // 			logrus.Warnf("BroadcastTypingNotification: –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω", client.UserID)
// // 		}
// // 	}
// // }

// // // InitWebSocketServer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç presenceSvc, –∞ –∑–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ö–∞–± –∏ HTTP-—Å–µ—Ä–≤–µ—Ä.
// // func InitWebSocketServer(ps *services.PresenceService, addr string) error {
// // 	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä–≤–∏—Å
// // 	presenceSvc = ps
// // 	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª —Ö–∞–±–∞
// // 	go RunHub()
// // 	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ WS
// // 	http.HandleFunc("/ws", HandleWebSocket)
// // 	logrus.Infof("WebSocket server started on %s", addr)
// // 	return http.ListenAndServe(addr, nil)
// // }

// RunWebSocketServer –∑–∞–ø—É—Å–∫–∞–µ—Ç HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–º –∞–¥—Ä–µ—Å–µ.
// func RunWebSocketServer(addr string) error {
// 	go RunHub()
// 	http.HandleFunc("/ws", HandleWebSocket)
// 	logrus.Infof("WebSocket server started on %s", addr)
// 	return http.ListenAndServe(addr, nil)
// }

package sockets

import (
	"encoding/json"
	"net/http"
	"strconv"
	"strings"
	"sync"
	"time"

	"m/backend/models"
	"m/backend/services"

	"github.com/google/uuid"
	"github.com/gorilla/websocket"
	"github.com/sirupsen/logrus"
)

// presenceSvc —Ö—Ä–∞–Ω–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ PresenceService, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–∑ main.go
var presenceSvc *services.PresenceService

// BroadcastMessage –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —á–∞—Ç–∞–º.
type BroadcastMessage struct {
	ChatID uint   `json:"chatId"`
	Data   []byte `json:"data"`
}

// Client –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ WebSocket-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.
type Client struct {
	Conn        *websocket.Conn // WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	UserID      string          // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	Send        chan []byte     // –ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç—É
	Chats       map[uint]bool   // –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ (chatID -> true)
	TypingChats map[uint]bool   // –°–æ—Å—Ç–æ—è–Ω–∏–µ ¬´–ø–µ—á–∞—Ç–∞–µ—Ç¬ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
	Mutex       sync.Mutex      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ Chats –∏ TypingChats
}

// Hub —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ —Ä–∞—Å—Å—ã–ª–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∞—Ç–∞–º.
type Hub struct {
	Clients           map[*Client]bool          // –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
	ChatSubscriptions map[uint]map[*Client]bool // –î–ª—è –∫–∞–∂–¥–æ–≥–æ chatID ‚Äî –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
	Broadcast         chan BroadcastMessage     // –ö–∞–Ω–∞–ª –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	Register          chan *Client              // –ö–∞–Ω–∞–ª –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
	Unregister        chan *Client              // –ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
	Mutex             sync.RWMutex              // –ó–∞—â–∏—Ç–∞ –æ–±—â–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ö–∞–±–∞
var hub = Hub{
	Clients:           make(map[*Client]bool),
	ChatSubscriptions: make(map[uint]map[*Client]bool),
	Broadcast:         make(chan BroadcastMessage),
	Register:          make(chan *Client),
	Unregister:        make(chan *Client),
}

// IsUserTypingInChat –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–µ—á–∞—Ç–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å userID –≤ —á–∞—Ç–µ chatID.
func IsUserTypingInChat(chatID uint, userID string) bool {
	hub.Mutex.RLock()
	defer hub.Mutex.RUnlock()
	subs, ok := hub.ChatSubscriptions[chatID]
	if !ok {
		return false
	}
	for client := range subs {
		if client.UserID == userID {
			client.Mutex.Lock()
			typing := client.TypingChats[chatID]
			client.Mutex.Unlock()
			if typing {
				return true
			}
		}
	}
	return false
}

// RunHub –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –æ—Ç–ø–∏—Å–∫–∞ –∏ —Ä–∞—Å—Å—ã–ª–∫–∞.
func RunHub() {
	for {
		select {
		case client := <-hub.Register:
			hub.Mutex.Lock()
			hub.Clients[client] = true
			hub.Mutex.Unlock()
			logrus.Infof("Client registered: %s", client.UserID)

		case client := <-hub.Unregister:
			hub.Mutex.Lock()
			if _, ok := hub.Clients[client]; ok {
				delete(hub.Clients, client)
				// –£–±–∏—Ä–∞–µ–º –∏–∑ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
				for chatID := range client.Chats {
					if subs := hub.ChatSubscriptions[chatID]; subs != nil {
						delete(subs, client)
						if len(subs) == 0 {
							delete(hub.ChatSubscriptions, chatID)
						}
					}
				}
				close(client.Send)
				logrus.Infof("Client unregistered: %s", client.UserID)
			}
			hub.Mutex.Unlock()

		case msg := <-hub.Broadcast:
			hub.Mutex.RLock()
			if subs := hub.ChatSubscriptions[msg.ChatID]; subs != nil {
				for client := range subs {
					select {
					case client.Send <- msg.Data:
						logrus.Debugf("Message sent to client %s in chat %d", client.UserID, msg.ChatID)
					default:
						logrus.Warnf("Send channel full for client %s. Closing.", client.UserID)
						close(client.Send)
						delete(hub.Clients, client)
					}
				}
			}
			hub.Mutex.RUnlock()
		}
	}
}

const (
	writeWait  = 10 * time.Second
	pongWait   = 60 * time.Second
	pingPeriod = (pongWait * 9) / 10
)

var upgrader = websocket.Upgrader{
	ReadBufferSize:  1024,
	WriteBufferSize: 1024,
	CheckOrigin:     func(r *http.Request) bool { return true }, // –≤ –ø—Ä–æ–¥–µ —Å—É–∑—å—Ç–µ
}

// HandleWebSocket –∞–ø–≥—Ä–µ–π–¥–∏—Ç HTTP->WebSocket, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å—Ç–∞—Ä—Ç—É–µ—Ç read/write-–ø–µ—Ç–ª–∏.
func HandleWebSocket(w http.ResponseWriter, r *http.Request) {
	conn, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		logrus.Errorf("WebSocket upgrade error: %v", err)
		return
	}

	userID := r.URL.Query().Get("userID")
	if userID == "" {
		userID = uuid.New().String()
		logrus.Debug("HandleWebSocket: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω userID")
	}

	client := &Client{
		Conn:        conn,
		Send:        make(chan []byte, 256),
		UserID:      userID,
		Chats:       make(map[uint]bool),
		TypingChats: make(map[uint]bool),
	}

	// –û—Ç–º–µ—Ç–∏—Ç—å –æ–Ω–ª–∞–π–Ω –≤ Redis
	if presenceSvc != nil {
		if err := presenceSvc.Touch(userID); err != nil {
			logrus.Warnf("presence.Touch failed for %s: %v", userID, err)
		}
	}

	hub.Register <- client
	logrus.Infof("HandleWebSocket: –∫–ª–∏–µ–Ω—Ç %s –ø–æ–¥–∫–ª—é—á—ë–Ω", client.UserID)

	go client.writePump()
	client.readPump()
}

// readPump —Å–ª—É—à–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –ø–æ–¥–ø–∏—Å–∫–∞/–æ—Ç–ø–∏—Å–∫–∞, heartbeat, typing.
func (c *Client) readPump() {
	defer func() {
		hub.Unregister <- c
		c.Conn.Close()
		logrus.Infof("readPump: –∑–∞–∫—Ä—ã—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ %s", c.UserID)
		// –û—á–∏—Å—Ç–∫–∞ presence
		if presenceSvc != nil {
			_ = presenceSvc.Rdb.Del(presenceSvc.Ctx, services.PresencePrefix+c.UserID).Err()
		}
	}()

	c.Conn.SetReadLimit(512)
	c.Conn.SetReadDeadline(time.Now().Add(pongWait))
	c.Conn.SetPongHandler(func(string) error {
		c.Conn.SetReadDeadline(time.Now().Add(pongWait))
		return nil
	})

	for {
		_, msg, err := c.Conn.ReadMessage()
		if err != nil {
			if websocket.IsUnexpectedCloseError(err, websocket.CloseGoingAway, websocket.CloseAbnormalClosure) {
				logrus.Errorf("readPump error for %s: %v", c.UserID, err)
			}
			break
		}

		var req struct {
			Action   string `json:"action"`
			ChatID   string `json:"chat_id"`
			IsOnline *bool  `json:"is_online"`
			IsTyping *bool  `json:"is_typing"`
		}
		if err := json.Unmarshal(msg, &req); err != nil {
			logrus.Errorf("readPump: unmarshal error for %s: %v", c.UserID, err)
			continue
		}

		switch req.Action {
		case "subscribe", "unsubscribe":
			chatID, err := strconv.ParseUint(req.ChatID, 10, 64)
			if err != nil {
				logrus.Warnf("readPump: bad chat_id '%s' from %s", req.ChatID, c.UserID)
				continue
			}
			c.Mutex.Lock()
			if req.Action == "subscribe" {
				c.Chats[uint(chatID)] = true
				hub.Mutex.Lock()
				if hub.ChatSubscriptions[uint(chatID)] == nil {
					hub.ChatSubscriptions[uint(chatID)] = make(map[*Client]bool)
				}
				hub.ChatSubscriptions[uint(chatID)][c] = true
				hub.Mutex.Unlock()
				logrus.Infof("%s subscribed to chat %d", c.UserID, chatID)
			} else {
				delete(c.Chats, uint(chatID))
				hub.Mutex.Lock()
				if subs := hub.ChatSubscriptions[uint(chatID)]; subs != nil {
					delete(subs, c)
					if len(subs) == 0 {
						delete(hub.ChatSubscriptions, uint(chatID))
					}
				}
				hub.Mutex.Unlock()
				logrus.Infof("%s unsubscribed from chat %d", c.UserID, chatID)
			}
			c.Mutex.Unlock()

		case "heartbeat":
			logrus.Debugf("readPump heartbeat from %s", c.UserID)
			//go updateUserOnlineStatus(c.UserID, *req.IsOnline)!!!!!!!!!!!!!!!!!!!!!!!
			if presenceSvc != nil {
				if err := presenceSvc.Touch(c.UserID); err != nil {
					logrus.Warnf("presence.Touch failed for %s: %v", c.UserID, err)
				}
			}

		case "typing":
			chatID, err := strconv.ParseUint(req.ChatID, 10, 64)
			if err != nil {
				logrus.Warnf("readPump: bad chat_id in typing from %s", c.UserID)
				continue
			}
			if req.IsTyping == nil {
				logrus.Warnf("readPump: missing is_typing from %s", c.UserID)
				continue
			}
			c.Mutex.Lock()
			c.TypingChats[uint(chatID)] = *req.IsTyping
			c.Mutex.Unlock()

			uid, err := uuid.Parse(c.UserID)
			if err == nil {
				go BroadcastTypingNotification(uid, uint(chatID), *req.IsTyping)
			}

		default:
			logrus.Warnf("readPump: unknown action '%s' from %s", req.Action, c.UserID)
		}
	}
}

// writePump —à–ª—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–∞–Ω–∞–ª—É Send –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏–Ω–≥–∏.
func (c *Client) writePump() {
	ticker := time.NewTicker(pingPeriod)
	defer func() {
		ticker.Stop()
		c.Conn.Close()
		logrus.Infof("writePump: connection closed for %s", c.UserID)
	}()

	for {
		select {
		case message, ok := <-c.Send:
			c.Conn.SetWriteDeadline(time.Now().Add(writeWait))
			if !ok {
				_ = c.Conn.WriteMessage(websocket.CloseMessage, []byte{})
				return
			}
			w, err := c.Conn.NextWriter(websocket.TextMessage)
			if err != nil {
				return
			}
			w.Write(message)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—ë, —á—Ç–æ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å
			for i := 0; i < len(c.Send); i++ {
				w.Write([]byte("\n"))
				w.Write(<-c.Send)
			}
			w.Close()

		case <-ticker.C:
			c.Conn.SetWriteDeadline(time.Now().Add(writeWait))
			if err := c.Conn.WriteMessage(websocket.PingMessage, nil); err != nil {
				return
			}
		}
	}
}

func BroadcastNewMessage(msg models.Message) error {
	// –°–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ msg.Sender.Profile
	senderName := "Unknown"
	if msg.Sender.Profile.FirstName != "" || msg.Sender.Profile.LastName != "" {
		senderName = strings.TrimSpace(
			msg.Sender.Profile.FirstName + " " +
				msg.Sender.Profile.LastName,
		)
	}

	payload := map[string]interface{}{
		"type":        "message",
		"chat_id":     msg.ChatID,
		"id":          msg.ID,
		"sender_id":   msg.SenderID.String(),
		"sender_name": senderName, // —Ç–µ–ø–µ—Ä—å –±–µ—Ä—ë—Ç—Å—è –∏–∑ Profile
		"content":     msg.Content,
		"timestamp":   msg.Timestamp.UnixNano() / int64(time.Millisecond),
		"read":        msg.Read,
	}

	data, err := json.Marshal(payload)
	if err != nil {
		logrus.Errorf("BroadcastNewMessage: marshal error: %v", err)
		return err
	}

	hub.Broadcast <- BroadcastMessage{
		ChatID: msg.ChatID,
		Data:   data,
	}
	logrus.Infof("BroadcastNewMessage: sent message %d to chat %d", msg.ID, msg.ChatID)
	return nil
}

// BroadcastNotification —à–ª—ë—Ç –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
func BroadcastNotification(userID uuid.UUID, message string) {
	data, err := json.Marshal(map[string]string{
		"type":    "notification",
		"message": message,
	})
	if err != nil {
		logrus.Errorf("BroadcastNotification: marshal error: %v", err)
		return
	}

	hub.Mutex.RLock()
	defer hub.Mutex.RUnlock()
	for client := range hub.Clients {
		if client.UserID == userID.String() {
			select {
			case client.Send <- data:
				logrus.Infof("Notification sent to %s", userID)
			default:
				logrus.Warnf("Notification channel full for %s", userID)
			}
		}
	}
}

// BroadcastTypingNotification —Ä–∞—Å—Å—ã–ª–∞–µ—Ç ¬´–ø–µ—á–∞—Ç–∞–µ—Ç‚Ä¶¬ª –≤—Å–µ–º –≤ —á–∞—Ç–µ.
func BroadcastTypingNotification(userID uuid.UUID, chatID uint, isTyping bool) {
	data, err := json.Marshal(map[string]interface{}{
		"type":      "typing",
		"user_id":   userID.String(),
		"chat_id":   chatID,
		"is_typing": isTyping,
		"timestamp": time.Now().Unix(),
	})
	if err != nil {
		logrus.Errorf("BroadcastTypingNotification: marshal error: %v", err)
		return
	}

	hub.Mutex.RLock()
	subs, ok := hub.ChatSubscriptions[chatID]
	hub.Mutex.RUnlock()
	if !ok {
		return
	}
	for client := range subs {
		select {
		case client.Send <- data:
		default:
			logrus.Warnf("Typing channel full for %s", client.UserID)
		}
	}
}

// BroadcastConnectionRequest –ø–æ—Å—ã–ª–∞–µ—Ç –≤—Å–µ–º WS-–∫–ª–∏–µ–Ω—Ç–∞–º –∏–º–µ–Ω–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –≤ –¥—Ä—É–∑—å—è.
func BroadcastConnectionRequest(userID uuid.UUID) {
	payload := map[string]interface{}{
		"type": "connection_request",
	}
	data, err := json.Marshal(payload)
	if err != nil {
		logrus.Errorf("BroadcastConnectionRequest: marshal error: %v", err)
		return
	}

	// —à–ª—ë–º —Ç–æ–ª—å–∫–æ —Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É, —á–µ–π userID —Å–æ–≤–ø–∞–ª
	hub.Mutex.RLock()
	defer hub.Mutex.RUnlock()
	for client := range hub.Clients {
		if client.UserID == userID.String() {
			select {
			case client.Send <- data:
				logrus.Infof("ConnectionRequest event sent to %s", userID)
			default:
				logrus.Warnf("ConnectionRequest channel full for %s", userID)
			}
		}
	}
}

// InitWebSocketServer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç presenceSvc, –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ö–∞–± –∏ HTTP-—Å–µ—Ä–≤–µ—Ä.
func InitWebSocketServer(ps *services.PresenceService, addr string) error {
	presenceSvc = ps
	go RunHub()
	http.HandleFunc("/ws", HandleWebSocket)
	logrus.Infof("WebSocket server started on %s", addr)
	return http.ListenAndServe(addr, nil)
}
