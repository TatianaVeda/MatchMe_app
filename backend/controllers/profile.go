package controllers

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"time"

	"m/backend/config"
	"m/backend/models"
	"m/backend/utils"

	"github.com/google/uuid"
	"github.com/sirupsen/logrus"
	"gorm.io/gorm"
)

// profileDB –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –∏ –±–∏–æ–≥—Ä–∞—Ñ–∏–µ–π.
var profileDB *gorm.DB

// InitProfileController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –ø—Ä–æ—Ñ–∏–ª—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
func InitProfileController(db *gorm.DB) {
	profileDB = db
	logrus.Info("Profile controller initialized")
}

// UpdateCurrentUserProfile –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é "–û–±–æ –º–Ω–µ" (–Ω–∞–ø—Ä–∏–º–µ—Ä, first name, last name, about).
// PUT /me/profile
// –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
func UpdateCurrentUserProfile(w http.ResponseWriter, r *http.Request) {
	userIDStr, ok := r.Context().Value("userID").(string)
	if !ok {
		logrus.Error("UpdateCurrentUserProfile: userID not found in context")
		http.Error(w, "Unauthorized", http.StatusUnauthorized)
		return
	}
	currentUserID, err := uuid.Parse(userIDStr)
	if err != nil {
		logrus.Errorf("UpdateCurrentUserProfile: invalid userID: %v", err)
		http.Error(w, "Invalid userID", http.StatusBadRequest)
		return
	}

	var reqBody struct {
		FirstName string  `json:"firstName"`
		LastName  string  `json:"lastName"`
		About     string  `json:"about"`
		City      string  `json:"city"`
		Latitude  float64 `json:"latitude"` // ‚Üê –Ω–æ–≤—ã–µ –ø–æ–ª—è
		Longitude float64 `json:"longitude"`
	}

	if err := json.NewDecoder(r.Body).Decode(&reqBody); err != nil {
		logrus.Errorf("UpdateCurrentUserProfile: error decoding request body: %v", err)
		http.Error(w, "Invalid request body", http.StatusBadRequest)
		return
	}
	if err := utils.ValidateStringLength(reqBody.FirstName, 255); err != nil {
		http.Error(w, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è", http.StatusBadRequest)
		return
	}
	if err := utils.ValidateStringLength(reqBody.LastName, 255); err != nil {
		http.Error(w, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è", http.StatusBadRequest)
		return
	}
	if err := utils.ValidateStringLength(reqBody.About, 1000); err != nil {
		http.Error(w, "–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ", http.StatusBadRequest)
		return
	}
	if reqBody.City == "" {
		http.Error(w, "–ì–æ—Ä–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", http.StatusBadRequest)
		return
	}

	// var profile models.Profile
	// if err := profileDB.First(&profile, "user_id = ?", currentUserID).Error; err != nil {
	// 	logrus.Errorf("UpdateCurrentUserProfile: profile not found for user %s: %v", currentUserID, err)
	// 	http.Error(w, "Profile not found", http.StatusNotFound)
	// 	return
	// }

	var profile models.Profile
	err = profileDB.First(&profile, "user_id = ?", currentUserID).Error
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			// Create new profile if not found
			profile = models.Profile{
				UserID:    currentUserID,
				FirstName: reqBody.FirstName,
				LastName:  reqBody.LastName,
				About:     reqBody.About,
				City:      reqBody.City,
				Latitude:  reqBody.Latitude,
				Longitude: reqBody.Longitude,
			}
			if err := profileDB.Create(&profile).Error; err != nil {
				logrus.Errorf("UpdateCurrentUserProfile: error creating profile for user %s: %v", currentUserID, err)
				http.Error(w, "Error creating profile", http.StatusInternalServerError)
				return
			}
			logrus.Infof("Profile for user %s created successfully", currentUserID)
		} else {
			logrus.Errorf("UpdateCurrentUserProfile: error querying profile for user %s: %v", currentUserID, err)
			http.Error(w, "Error reading profile", http.StatusInternalServerError)
			return
		}
	} else {
		// Update existing profile
		profile.FirstName = reqBody.FirstName
		profile.LastName = reqBody.LastName
		profile.About = reqBody.About
		profile.City = reqBody.City
		if reqBody.Latitude != 0 || reqBody.Longitude != 0 {
			profile.Latitude = reqBody.Latitude
			profile.Longitude = reqBody.Longitude
		}

		if err := profileDB.Save(&profile).Error; err != nil {
			logrus.Errorf("UpdateCurrentUserProfile: error updating profile for user %s: %v", currentUserID, err)
			http.Error(w, "Error updating profile", http.StatusInternalServerError)
			return
		}
		logrus.Infof("Profile for user %s updated successfully", currentUserID)
	}

	// profile.FirstName = reqBody.FirstName
	// profile.LastName = reqBody.LastName
	// profile.About = reqBody.About
	// profile.City = reqBody.City

	// // // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –≥–µ–æ–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º
	// if reqBody.Latitude != 0 || reqBody.Longitude != 0 {
	// 	profile.Latitude = reqBody.Latitude
	// 	profile.Longitude = reqBody.Longitude
	// }

	// if err := profileDB.Save(&profile).Error; err != nil {
	// 	logrus.Errorf("UpdateCurrentUserProfile: error updating profile for user %s: %v", currentUserID, err)
	// 	http.Error(w, "Error updating profile", http.StatusInternalServerError)
	// 	return
	// }

	// Save earth_loc in PostgreSQL
	if profile.Latitude != 0 && profile.Longitude != 0 {
		if err := profileDB.Exec(`
		UPDATE profiles
		SET earth_loc = ll_to_earth(?, ?)
		WHERE user_id = ?
	`, profile.Latitude, profile.Longitude, profile.UserID).Error; err != nil {
			logrus.Errorf("Error setting earth_loc for user %s: %v", profile.UserID, err)
			http.Error(w, "Failed to update earth location", http.StatusInternalServerError)
			return
		}
	}

	logrus.Infof("Profile for user %s updated successfully", currentUserID)
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(profile)
}

// PUT /me/location
func UpdateCurrentUserLocation(w http.ResponseWriter, r *http.Request) {
	userIDStr, ok := r.Context().Value("userID").(string)
	if !ok {
		http.Error(w, "Unauthorized", http.StatusUnauthorized)
		return
	}
	currentUserID, err := uuid.Parse(userIDStr)
	if err != nil {
		http.Error(w, "Invalid userID", http.StatusBadRequest)
		return
	}

	var reqBody struct {
		Latitude  float64 `json:"latitude"`
		Longitude float64 `json:"longitude"`
	}
	if err := json.NewDecoder(r.Body).Decode(&reqBody); err != nil {
		http.Error(w, "Invalid request body", http.StatusBadRequest)
		return
	}

	var profile models.Profile
	err = profileDB.First(&profile, "user_id = ?", currentUserID).Error
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			// Create new profile with coordinates
			profile = models.Profile{
				UserID:    currentUserID,
				Latitude:  reqBody.Latitude,
				Longitude: reqBody.Longitude,
			}
			if err := profileDB.Create(&profile).Error; err != nil {
				http.Error(w, "Error creating profile with location", http.StatusInternalServerError)
				return
			}
			logrus.Infof("New profile created with coordinates for user %s", currentUserID)
		} else {
			http.Error(w, "Error retrieving profile", http.StatusInternalServerError)
			return
		}
	} else {
		// Update existing coordinates
		profile.Latitude = reqBody.Latitude
		profile.Longitude = reqBody.Longitude
		if err := profileDB.Save(&profile).Error; err != nil {
			http.Error(w, "Error updating location", http.StatusInternalServerError)
			return
		}
		logrus.Infof("Coordinates for user %s updated successfully", currentUserID)
	}

	// üåç Update the earth_loc column using ll_to_earth
	if reqBody.Latitude != 0 && reqBody.Longitude != 0 {
		if err := profileDB.Exec(`
			UPDATE profiles
			SET earth_loc = ll_to_earth(?, ?)
			WHERE user_id = ?
		`, reqBody.Latitude, reqBody.Longitude, currentUserID).Error; err != nil {
			logrus.Errorf("Error updating earth_loc for user %s: %v", currentUserID, err)
			http.Error(w, "Error updating earth location", http.StatusInternalServerError)
			return
		}
		logrus.Infof("earth_loc updated for user %s", currentUserID)
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(profile)
}

// func UpdateCurrentUserLocation(w http.ResponseWriter, r *http.Request) {
// 	userIDStr, ok := r.Context().Value("userID").(string)
// 	if !ok {
// 		http.Error(w, "Unauthorized", http.StatusUnauthorized)
// 		return
// 	}
// 	currentUserID, err := uuid.Parse(userIDStr)
// 	if err != nil {
// 		http.Error(w, "Invalid userID", http.StatusBadRequest)
// 		return
// 	}

// 	var reqBody struct {
// 		Latitude  float64 `json:"latitude"`
// 		Longitude float64 `json:"longitude"`
// 	}
// 	if err := json.NewDecoder(r.Body).Decode(&reqBody); err != nil {
// 		http.Error(w, "Invalid request body", http.StatusBadRequest)
// 		return
// 	}

// 	var profile models.Profile
// 	err = profileDB.First(&profile, "user_id = ?", currentUserID).Error
// 	if err != nil {
// 		if errors.Is(err, gorm.ErrRecordNotFound) {
// 			// Create new profile with coordinates
// 			profile = models.Profile{
// 				UserID:    currentUserID,
// 				Latitude:  reqBody.Latitude,
// 				Longitude: reqBody.Longitude,
// 			}
// 			if err := profileDB.Create(&profile).Error; err != nil {
// 				http.Error(w, "Error creating profile with location", http.StatusInternalServerError)
// 				return
// 			}
// 			logrus.Infof("New profile created with coordinates for user %s", currentUserID)
// 		} else {
// 			http.Error(w, "Error retrieving profile", http.StatusInternalServerError)
// 			return
// 		}
// 	} else {
// 		// Update existing coordinates
// 		profile.Latitude = reqBody.Latitude
// 		profile.Longitude = reqBody.Longitude
// 		if err := profileDB.Save(&profile).Error; err != nil {
// 			http.Error(w, "Error updating location", http.StatusInternalServerError)
// 			return
// 		}
// 		logrus.Infof("Coordinates for user %s updated successfully", currentUserID)
// 	}

// 	w.Header().Set("Content-Type", "application/json")
// 	json.NewEncoder(w).Encode(profile)
// }

// UpdateCurrentUserBio –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
// PUT /me/bio
// –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
func UpdateCurrentUserBio(w http.ResponseWriter, r *http.Request) {
	userIDStr, ok := r.Context().Value("userID").(string)
	if !ok {
		logrus.Error("UpdateCurrentUserBio: userID not found in context")
		http.Error(w, "Unauthorized", http.StatusUnauthorized)
		return
	}
	currentUserID, err := uuid.Parse(userIDStr)
	if err != nil {
		logrus.Errorf("UpdateCurrentUserBio: invalid userID: %v", err)
		http.Error(w, "Invalid userID", http.StatusBadRequest)
		return
	}

	var reqBody struct {
		Interests         string `json:"interests"`
		Hobbies           string `json:"hobbies"`
		Music             string `json:"music"`
		Food              string `json:"food"`
		Travel            string `json:"travel"`
		LookingFor        string `json:"lookingFor"`
		PriorityInterests bool   `json:"priorityInterests"`
		PriorityHobbies   bool   `json:"priorityHobbies"`
		PriorityMusic     bool   `json:"priorityMusic"`
		PriorityFood      bool   `json:"priorityFood"`
		PriorityTravel    bool   `json:"priorityTravel"`
	}

	logrus.Infof("UpdateCurrentUserBio: reqBody: %+v", reqBody)

	if err := json.NewDecoder(r.Body).Decode(&reqBody); err != nil {
		logrus.Errorf("UpdateCurrentUserBio: error decoding request body: %v", err)
		http.Error(w, "Invalid request body", http.StatusBadRequest)
		return
	}

	var bio models.Bio
	if err := profileDB.First(&bio, "user_id = ?", currentUserID).Error; err != nil {
		logrus.Errorf("UpdateCurrentUserBio: bio not found for user %s: %v", currentUserID, err)
		http.Error(w, "Bio not found", http.StatusNotFound)
		return
	}

	bio.Interests = reqBody.Interests
	bio.Hobbies = reqBody.Hobbies
	bio.Music = reqBody.Music
	bio.Food = reqBody.Food
	bio.Travel = reqBody.Travel
	bio.LookingFor = reqBody.LookingFor

	if err := profileDB.Save(&bio).Error; err != nil {
		logrus.Errorf("UpdateCurrentUserBio: error updating bio for user %s: %v", currentUserID, err)
		http.Error(w, "Error updating bio", http.StatusInternalServerError)
		return
	}

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ñ–ª–∞–≥–∏ –≤ Preference
	var pref models.Preference
	if err := profileDB.
		Where("user_id = ?", currentUserID).
		First(&pref).Error; err != nil {
		// –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
		pref = models.Preference{
			UserID:            currentUserID,
			PriorityInterests: reqBody.PriorityInterests,
			PriorityHobbies:   reqBody.PriorityHobbies,
			PriorityMusic:     reqBody.PriorityMusic,
			PriorityFood:      reqBody.PriorityFood,
			PriorityTravel:    reqBody.PriorityTravel,
		}
		if err := profileDB.Create(&pref).Error; err != nil {
			logrus.Errorf("UpdateCurrentUserBio: error creating preferences for user %s: %v", currentUserID, err)
		}
	} else {
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–ª–∞–≥–∏
		pref.PriorityInterests = reqBody.PriorityInterests
		pref.PriorityHobbies = reqBody.PriorityHobbies
		pref.PriorityMusic = reqBody.PriorityMusic
		pref.PriorityFood = reqBody.PriorityFood
		pref.PriorityTravel = reqBody.PriorityTravel
		if err := profileDB.Save(&pref).Error; err != nil {
			logrus.Errorf("UpdateCurrentUserBio: error updating preferences for user %s: %v", currentUserID, err)
		}
	}

	logrus.Infof("Bio for user %s updated successfully", currentUserID)
	w.Header().Set("Content-Type", "application/json")
	//json.NewEncoder(w).Encode(bio)
	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é Bio + Preferences –≤–º–µ—Å—Ç–µ –≤ –æ–¥–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
	json.NewEncoder(w).Encode(map[string]interface{}{
		"bio":         bio,
		"preferences": pref,
	})
}

// UploadUserPhoto –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É/–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.
// POST /me/photo
// –û–∂–∏–¥–∞–µ—Ç—Å—è multipart/form-data —Å —Ñ–∞–π–ª–æ–º –ø–æ–¥ –∏–º–µ–Ω–µ–º "photo".
// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ (JPEG/PNG), —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ MediaUploadDir,
// –∏ –≤ –ø–æ–ª–µ PhotoURL –ø—Ä–æ—Ñ–∏–ª—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å.
// –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
func UploadUserPhoto(w http.ResponseWriter, r *http.Request) {

	if err := r.ParseMultipartForm(5 << 20); err != nil {
		logrus.Errorf("UploadUserPhoto: error parsing multipart form: %v", err)
		http.Error(w, "Could not parse multipart form", http.StatusBadRequest)
		return
	}

	userIDStr, ok := r.Context().Value("userID").(string)
	if !ok {
		logrus.Error("UploadUserPhoto: userID not found in context")
		http.Error(w, "Unauthorized", http.StatusUnauthorized)
		return
	}
	currentUserID, err := uuid.Parse(userIDStr)
	if err != nil {
		logrus.Errorf("UploadUserPhoto: invalid userID: %v", err)
		http.Error(w, "Invalid userID", http.StatusBadRequest)
		return
	}

	file, fileHeader, err := r.FormFile("photo")
	if err != nil {
		logrus.Errorf("UploadUserPhoto: error retrieving file: %v", err)
		http.Error(w, "Error retrieving the file", http.StatusBadRequest)
		return
	}
	defer file.Close()

	// –°—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 512 –±–∞–π—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
	fileBytes := make([]byte, 512)
	if _, err := file.Read(fileBytes); err != nil {
		logrus.Errorf("UploadUserPhoto: error reading file: %v", err)
		http.Error(w, "Error reading file", http.StatusBadRequest)
		return
	}
	fileType := http.DetectContentType(fileBytes)
	if fileType != "image/jpeg" && fileType != "image/png" {
		logrus.Warnf("UploadUserPhoto: unsupported file type: %s", fileType)
		http.Error(w, "Only JPEG and PNG images are allowed", http.StatusBadRequest)
		return
	}
	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞.
	file.Seek(0, 0)

	ext := filepath.Ext(fileHeader.Filename)
	newFileName := currentUserID.String() + "_" + strconv.FormatInt(time.Now().Unix(), 10) + ext
	uploadDir := config.AppConfig.MediaUploadDir

	if err := os.MkdirAll(uploadDir, os.ModePerm); err != nil {
		logrus.Errorf("UploadUserPhoto: error creating upload directory: %v", err)
		http.Error(w, "Error creating upload directory", http.StatusInternalServerError)
		return
	}
	fullPath := filepath.Join(uploadDir, newFileName)

	dst, err := os.Create(fullPath)
	if err != nil {
		logrus.Errorf("UploadUserPhoto: error creating file: %v", err)
		http.Error(w, "Error saving file", http.StatusInternalServerError)
		return
	}
	defer dst.Close()

	if _, err := io.Copy(dst, file); err != nil {
		logrus.Errorf("UploadUserPhoto: error saving file: %v", err)
		http.Error(w, "Error saving file", http.StatusInternalServerError)
		return
	}

	var profile models.Profile
	if err := profileDB.First(&profile, "user_id = ?", currentUserID).Error; err != nil {
		logrus.Errorf("UploadUserPhoto: profile not found for user %s: %v", currentUserID, err)
		http.Error(w, "Profile not found", http.StatusNotFound)
		return
	}
	profile.PhotoURL = "/static/images/" + newFileName

	if err := profileDB.Save(&profile).Error; err != nil {
		logrus.Errorf("UploadUserPhoto: error updating profile photo for user %s: %v", currentUserID, err)
		http.Error(w, "Error updating profile photo", http.StatusInternalServerError)
		return
	}

	logrus.Infof("Profile photo for user %s updated successfully", currentUserID)
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(profile)
}

// DeleteUserPhoto ‚Äì endpoint –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Å–±—Ä–æ—Å–∞) —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
func DeleteUserPhoto(w http.ResponseWriter, r *http.Request) {
	// –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≤ AuthMiddleware)
	userIDStr, ok := r.Context().Value("userID").(string)
	if !ok {
		logrus.Error("DeleteUserPhoto: userID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
		http.Error(w, "Unauthorized", http.StatusUnauthorized)
		return
	}
	currentUserID, err := uuid.Parse(userIDStr)
	if err != nil {
		logrus.Errorf("DeleteUserPhoto: –Ω–µ–≤–µ—Ä–Ω—ã–π userID: %v", err)
		http.Error(w, "Invalid userID", http.StatusBadRequest)
		return
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var profile models.Profile
	if err := profileDB.First(&profile, "user_id = ?", currentUserID).Error; err != nil {
		logrus.Errorf("DeleteUserPhoto: –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –Ω–µ –Ω–∞–π–¥–µ–Ω: %v", currentUserID, err)
		http.Error(w, "Profile not found", http.StatusNotFound)
		return
	}

	// –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ñ–æ—Ç–æ (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è)
	defaultPhotoURL := "/static/images/default.png"

	// –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –ø–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª
	if profile.PhotoURL != "" && profile.PhotoURL != defaultPhotoURL {
		uploadDir := config.AppConfig.MediaUploadDir // –Ω–∞–ø—Ä–∏–º–µ—Ä, "./static/images"
		// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ profile.PhotoURL –∏–º–µ–µ—Ç –≤–∏–¥ "/static/images/–∏–º—è_—Ñ–∞–π–ª–∞.ext"
		fileName := strings.TrimPrefix(profile.PhotoURL, "/static/images/")
		filePath := filepath.Join(uploadDir, fileName)
		if err := os.Remove(filePath); err != nil {
			// –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –º–æ–∂–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
			logrus.Warnf("DeleteUserPhoto: –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ %s: %v", filePath, err)
		} else {
			logrus.Infof("DeleteUserPhoto: —Ñ–∞–π–ª %s —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω", filePath)
		}
	}

	// –°–±—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏—è photo_url –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	profile.PhotoURL = defaultPhotoURL
	if err := profileDB.Save(&profile).Error; err != nil {
		logrus.Errorf("DeleteUserPhoto: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %v", currentUserID, err)
		http.Error(w, "Error updating profile", http.StatusInternalServerError)
		return
	}

	logrus.Infof("DeleteUserPhoto: —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s —Å–±—Ä–æ—à–µ–Ω–æ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", currentUserID)
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(profile)
}
